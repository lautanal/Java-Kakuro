package kakuro.logic;

import java.io.File;
import java.util.Scanner;

/**
 *
 * @author lasselautanala
 */
public class Map {

    private char[][] map;
    private int nRows;
    private int nCols;

    public Map(int mapNr) {
        switch (mapNr) {
            case 1:
                this.map = puzzle1();
                break;
            case 2:
                this.map = puzzle2();
                break;
            case 3:
                this.map = puzzle3();
                break;
            case 4:
                this.map = puzzle4();
                break;
            case 5:
                this.map = puzzle5();
                break;
            case 6:
                this.map = puzzle6();
                break;
            case 7:
                this.map = puzzle7();
                break;
            case 8:
                this.map = puzzle8();
                break;
            case 9:
                this.map = puzzle9();
                break;
            case 10:
                this.map = puzzle10();
                break;
        }
        this.nRows = this.map.length;
        this.nCols = this.map[0].length;
    }

    public int getnRows() {
        return nRows;
    }

    public int getnCols() {
        return nCols;
    }

    public char getChar(int i, int j) {
        return map[i][j];
    }

    public void setChar(int i, int j, char c) {
        map[i][j] = c;
    }


    
// Ruudukko 1
    public char[][] puzzle1() {
        char[][] p = new char[][] {
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '9', '5', '#', '#', '#', '#'},
            {'#', '#', '4', '3', '2', '#', '#', '#', '#'},
            {'#', '9', '3', '#', '#', '3', '8', '#', '#'},
            {'#', '7', '6', '#', '3', '1', '7', '#', '#'},
            {'#', '#', '1', '3', '4', '#', '2', '6', '#'},
            {'#', '#', '7', '5', '#', '#', '3', '9', '#'},
            {'#', '#', '#', '#', '5', '8', '1', '#', '#'},
            {'#', '#', '#', '#', '7', '9', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'}
        };
        return p;
    }

// Ruudukko 2
    public char[][] puzzle2() {
        char[][] p = new char[][] {
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '8', '7', '#', '#', '#', '#'},
            {'#', '7', '9', '6', '3', '4', '1', '#', '#'},
            {'#', '1', '5', '#', '#', '1', '3', '#', '#'},
            {'#', '#', '#', '#', '1', '3', '#', '#', '#'},
            {'#', '#', '#', '2', '4', '#', '#', '#', '#'},
            {'#', '#', '1', '9', '#', '#', '9', '2', '#'},
            {'#', '#', '2', '5', '1', '4', '7', '3', '#'},
            {'#', '#', '#', '#', '3', '9', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'}
        };
        return p;
    }

// Ruudukko 3
    public char[][] puzzle3() {
        char[][] p = new char[][] {
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '9', '8', '#', '#', '#', '#', '#', '#'},
            {'#', '1', '7', '#', '4', '8', '2', '#', '#'},
            {'#', '#', '6', '8', '9', '3', '7', '#', '#'},
            {'#', '#', '#', '9', '7', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '6', '3', '#', '#', '#'},
            {'#', '#', '9', '5', '8', '7', '2', '#', '#'},
            {'#', '#', '8', '2', '5', '#', '5', '8', '#'},
            {'#', '#', '#', '#', '#', '#', '1', '5', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'}
        };
        return p;
    }

// Ruudukko 4
    public char[][] puzzle4() {
        char[][] p = new char[][] {
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '3', '1', '#', '#', '#'},
            {'#', '#', '#', '#', '9', '6', '#', '#', '#'},
            {'#', '#', '8', '6', '#', '5', '1', '8', '#'},
            {'#', '#', '9', '2', '8', '#', '6', '9', '#'},
            {'#', '8', '6', '#', '3', '5', '9', '#', '#'},
            {'#', '3', '7', '4', '#', '3', '7', '#', '#'},
            {'#', '#', '#', '1', '6', '#', '#', '#', '#'},
            {'#', '#', '#', '3', '9', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'}
        };
        return p;
    }

// Ruudukko 5
    public char[][] puzzle5() {
        char[][] p = new char[][] {
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '9', '8', '#', '1', '5', '#'},
            {'#', '#', '1', '6', '2', '#', '5', '7', '#'},
            {'#', '3', '4', '#', '#', '3', '2', '#', '#'},
            {'#', '9', '5', '#', '7', '1', '6', '#', '#'},
            {'#', '#', '7', '6', '5', '#', '8', '3', '#'},
            {'#', '#', '9', '2', '#', '#', '3', '5', '#'},
            {'#', '9', '6', '#', '5', '9', '4', '#', '#'},
            {'#', '2', '3', '#', '9', '7', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'}
        };
        return p;
    }

// Ruudukko 6
    public char[][] puzzle6() {
        char[][] p = new char[][] {
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '9', '6', '#', '#', '#', '#'},
            {'#', '3', '4', '1', '7', '5', '2', '#', '#'},
            {'#', '5', '8', '#', '#', '9', '3', '#', '#'},
            {'#', '#', '#', '#', '9', '7', '#', '#', '#'},
            {'#', '#', '#', '3', '8', '#', '#', '#', '#'},
            {'#', '#', '4', '8', '#', '#', '6', '8', '#'},
            {'#', '#', '3', '5', '1', '7', '9', '2', '#'},
            {'#', '#', '#', '#', '3', '9', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'}
        };
        return p;
    }

// Ruudukko 7
    public char[][] puzzle7() {
        char[][] p = new char[][] {
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '6', '9', '#', '#', '#'},
            {'#', '#', '#', '8', '2', '5', '#', '#', '#'},
            {'#', '#', '4', '9', '#', '6', '7', '8', '#'},
            {'#', '#', '5', '6', '#', '#', '5', '7', '#'},
            {'#', '4', '1', '#', '#', '2', '4', '#', '#'},
            {'#', '7', '2', '1', '#', '6', '9', '#', '#'},
            {'#', '#', '#', '9', '2', '7', '#', '#', '#'},
            {'#', '#', '#', '8', '1', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'}
        };
        return p;
    }

// Ruudukko 8
    public char[][] puzzle8() {
        char[][] p = new char[][] {
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '9', '5', '#', '#', '#', '#'},
            {'#', '#', '5', '7', '1', '#', '#', '#', '#'},
            {'#', '6', '8', '#', '#', '6', '3', '#', '#'},
            {'#', '8', '4', '#', '7', '2', '8', '#', '#'},
            {'#', '#', '6', '1', '4', '#', '9', '2', '#'},
            {'#', '#', '9', '7', '#', '#', '7', '1', '#'},
            {'#', '#', '#', '#', '5', '1', '6', '#', '#'},
            {'#', '#', '#', '#', '9', '3', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'}
        };
        return p;
    }

// Ruudukko 9
    public char[][] puzzle9() {
        char[][] p = new char[][] {
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '9', '1', '#', '#', '#', '#', '#'},
            {'#', '#', '5', '2', '1', '#', '#', '#', '#'},
            {'#', '7', '8', '#', '3', '7', '9', '#', '#'},
            {'#', '1', '6', '#', '#', '9', '3', '#', '#'},
            {'#', '#', '1', '5', '#', '#', '6', '1', '#'},
            {'#', '#', '4', '9', '7', '#', '8', '3', '#'},
            {'#', '#', '#', '#', '9', '4', '7', '#', '#'},
            {'#', '#', '#', '#', '#', '5', '1', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'}
        };
        return p;
    }

// Ruudukko 10
    public char[][] puzzle10() {
        char[][] p = new char[][] {
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '7', '5', '#', '#', '7', '9', '#'},
            {'#', '#', '9', '8', '1', '6', '2', '4', '#'},
            {'#', '#', '#', '6', '2', '1', '#', '#', '#'},
            {'#', '#', '5', '1', '#', '2', '4', '#', '#'},
            {'#', '#', '6', '3', '#', '7', '1', '#', '#'},
            {'#', '#', '#', '7', '2', '4', '#', '#', '#'},
            {'#', '7', '1', '9', '6', '3', '2', '#', '#'},
            {'#', '9', '2', '#', '#', '8', '3', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#'}
        };
        return p;
    }

    
    public char[][] puzzlex() {
        int n = 50;
        char[][] t = new char[n][n];
        try {
            Scanner input = new Scanner(new File("laby2.txt"));
            for (int i = 0; i < n; i++) {
                String s = input.next();
                for (int j = 0; j < n; j++) {
                    t[i][j] = s.charAt(j);
                }
            }
        } catch (Exception e) {
        }
        return t;
    }
}